import { useState } from 'react';
import { useRouter } from 'next/router';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import BottomNav from '@/components/BottomNav';
import LessonInfoModal from '@/components/LessonInfoModal';
import styles from '@/styles/CourseDetail.module.scss';

interface Lesson {
  id: number;
  title: string;
  description: string;
  completed: boolean;
  difficulty?: 'D·ªÖ' | 'Trung b√¨nh' | 'Kh√≥';
  duration?: string;
}

interface CourseData {
  title: string;
  description: string;
  lessons: Lesson[];
}

const courseData: Record<string, CourseData> = {
  'tieng-nhat': {
    title: 'Ti·∫øng Nh·∫≠t',
    description: 'Kh√≥a h·ªçc Ti·∫øng Nh·∫≠t c∆° b·∫£n d√†nh cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu, t·ª´ hiragana, katakana ƒë·∫øn giao ti·∫øp h√†ng ng√†y.',
    lessons: [
      {
        id: 1,
        title: 'Hiragana c∆° b·∫£n',
        description: 'H·ªçc 46 k√Ω t·ª± Hiragana c∆° b·∫£n: „ÅÇ„ÅÑ„ÅÜ„Åà„Åä, „Åã„Åç„Åè„Åë„Åì v√† c√°ch vi·∫øt ƒë√∫ng n√©t.',
        completed: true,
        difficulty: 'D·ªÖ',
        duration: '15 ph√∫t',
      },
      {
        id: 2,
        title: 'Katakana c∆° b·∫£n',
        description: 'H·ªçc 46 k√Ω t·ª± Katakana: „Ç¢„Ç§„Ç¶„Ç®„Ç™, „Ç´„Ç≠„ÇØ„Ç±„Ç≥ v√† c√°ch s·ª≠ d·ª•ng cho t·ª´ ngo·∫°i lai.',
        completed: false,
        difficulty: 'D·ªÖ',
        duration: '18 ph√∫t',
      },
      {
        id: 3,
        title: 'Ch√†o h·ªèi v√† gi·ªõi thi·ªáu',
        description: 'H·ªçc c√°ch ch√†o h·ªèi: „ÅØ„Åò„ÇÅ„Åæ„Åó„Å¶„ÄÅ„Çà„Çç„Åó„Åè„ÅäÈ°ò„ÅÑ„Åó„Åæ„Åô v√† gi·ªõi thi·ªáu b·∫£n th√¢n.',
        completed: false,
        difficulty: 'Trung b√¨nh',
        duration: '20 ph√∫t',
      },
      {
        id: 4,
        title: 'S·ªë ƒë·∫øm v√† th·ªùi gian',
        description: 'H·ªçc ƒë·∫øm s·ªë t·ª´ 1-100, gi·ªù, ng√†y th√°ng nƒÉm v√† c√°ch h·ªèi th·ªùi gian.',
        completed: false,
        difficulty: 'Trung b√¨nh',
        duration: '25 ph√∫t',
      },
      {
        id: 5,
        title: 'Gia ƒë√¨nh v√† ng∆∞·ªùi th√¢n',
        description: 'T·ª´ v·ª±ng v·ªÅ gia ƒë√¨nh: „Åä„Å®„ÅÜ„Åï„Çì„ÄÅ„Åä„Åã„ÅÇ„Åï„Çì„ÄÅ„Åç„Çá„ÅÜ„Å†„ÅÑ v√† c√°ch n√≥i v·ªÅ ng∆∞·ªùi th√¢n.',
        completed: false,
        difficulty: 'Kh√≥',
        duration: '22 ph√∫t',
      },
    ],
  },
  'tieng-nhat-nang-cao': {
    title: 'Ti·∫øng Nh·∫≠t N√¢ng Cao',
    description: 'Kh√≥a h·ªçc Ti·∫øng Nh·∫≠t n√¢ng cao v·ªõi Kanji v√† ng·ªØ ph√°p ph·ª©c t·∫°p.',
    lessons: [
      {
        id: 1,
        title: 'Kanji c∆° b·∫£n',
        description: 'H·ªçc 50 ch·ªØ Kanji ƒë·∫ßu ti√™n: Êó•„ÄÅÊúà„ÄÅÁÅ´„ÄÅÊ∞¥„ÄÅÊú®„ÄÅÈáë„ÄÅÂúü v√† c√°ch ƒë·ªçc.',
        completed: false,
        difficulty: 'Kh√≥',
        duration: '30 ph√∫t',
      },
      {
        id: 2,
        title: 'Keigo - K√≠nh ng·ªØ',
        description: 'H·ªçc c√°ch s·ª≠ d·ª•ng k√≠nh ng·ªØ trong giao ti·∫øp c√¥ng s·ªü v√† x√£ h·ªôi.',
        completed: false,
        difficulty: 'Kh√≥',
        duration: '35 ph√∫t',
      },
    ],
  },
  'tieng-nhat-du-lich': {
    title: 'Ti·∫øng Nh·∫≠t Du L·ªãch',
    description: 'Kh√≥a h·ªçc Ti·∫øng Nh·∫≠t th·ª±c t·∫ø cho du l·ªãch Nh·∫≠t B·∫£n.',
    lessons: [
      {
        id: 1,
        title: 'T·∫°i s√¢n bay v√† kh√°ch s·∫°n',
        description: 'C√°c c·ª•m t·ª´ c·∫ßn thi·∫øt t·∫°i s√¢n bay, check-in kh√°ch s·∫°n v√† h·ªèi ƒë∆∞·ªùng.',
        completed: false,
        difficulty: 'Trung b√¨nh',
        duration: '20 ph√∫t',
      },
      {
        id: 2,
        title: 'Mua s·∫Øm v√† ƒÉn u·ªëng',
        description: 'C√°ch g·ªçi m√≥n t·∫°i nh√† h√†ng, mua s·∫Øm v√† th∆∞∆°ng l∆∞·ª£ng gi√° c·∫£.',
        completed: false,
        difficulty: 'Trung b√¨nh',
        duration: '18 ph√∫t',
      },
    ],
  },
};

export default function CourseDetailPage() {
  const router = useRouter();
  const { slug } = router.query;
  const [activeNav, setActiveNav] = useState('courses');
  const [selectedLesson, setSelectedLesson] = useState<Lesson | null>(null);
  const [isModalOpen, setIsModalOpen] = useState(false);

  const course = courseData[slug as string];

  if (!course) {
    return <div>Course not found</div>;
  }

  const handleBack = () => {
    router.back();
  };

  const handleLessonClick = (lesson: Lesson) => {
    setSelectedLesson(lesson);
    setIsModalOpen(true);
  };

  const handleCloseModal = () => {
    setIsModalOpen(false);
    setSelectedLesson(null);
  };

  return (
    <div className={styles.courseDetailPage}>
      {/* Header */}
      <header className={styles.header}>
        <Button 
          variant="ghost" 
          className={styles.backButton}
          onClick={handleBack}
        >
          ‚Üê
        </Button>
        <h1 className={styles.title}>{course.title}</h1>
        <div></div>
      </header>

      <div className={styles.content}>
        {/* Hero Image */}
        <div className={styles.heroSection}>
          <div className={styles.heroImage}>
            <div className={styles.plantIllustration}>
              <div className={styles.plant1}>üå±</div>
              <div className={styles.plant2}>üåø</div>
              <div className={styles.plant3}>ü™¥</div>
              <div className={styles.pot}>üè∫</div>
            </div>
          </div>
        </div>

        {/* Introduction */}
        <section className={styles.section}>
          <h2 className={styles.sectionTitle}>Gi·ªõi thi·ªáu</h2>
          <p className={styles.description}>{course.description}</p>
        </section>

        {/* Lessons Content */}
        <section className={styles.section}>
          <h2 className={styles.sectionTitle}>N·ªôi dung</h2>
          <div className={styles.lessonsList}>
            {course.lessons.map((lesson: Lesson) => (
              <Card 
                key={lesson.id} 
                className={styles.lessonItem}
                onClick={() => handleLessonClick(lesson)}
              >
                <CardContent className={styles.lessonContent}>
                  <div className={styles.lessonInfo}>
                    <h3 className={styles.lessonTitle}>
                      B√†i {lesson.id}: {lesson.title}
                    </h3>
                    <p className={styles.lessonDescription}>
                      {lesson.description}
                    </p>
                  </div>
                  <div className={styles.lessonStatus}>
                    {lesson.completed ? (
                      <div className={styles.completedIcon}>‚úì</div>
                    ) : (
                      <div className={styles.incompleteIcon}></div>
                    )}
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </section>
      </div>

      <BottomNav activeNav={activeNav} setActiveNav={setActiveNav} />

      {/* Lesson Info Modal */}
      <LessonInfoModal
        lesson={selectedLesson}
        isOpen={isModalOpen}
        onClose={handleCloseModal}
      />
    </div>
  );
} 